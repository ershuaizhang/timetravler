1、文件中的#ifndef

	头件的中的#ifndef，这是一个很关键的东西。比如你有两个C文件，这两个C文件都include了同一个头文件。而编译时，这两个C文件要一同编译成一个可运行文件，于是问题来了，大量的声明冲突。

	还是把头文件的内容都放在#ifndef和#endif中吧。不管你的头文件会不会被多个文件引用，你都要加上这个。一般格式是这样的：

	#ifndef <标识>
	#define <标识>

	......
	......

	#endif

	<标识>在理论上来说可以是自由命名的，但每个头文件的这个“标识”都应该是唯一的。标识的命名规则一般是头文件名全大写，前后加下划线，并把文件名中的“.”也变成下划线，如：stdio.h

	#ifndef _STDIO_H_
	#define _STDIO_H_

	......

	#endif


举个例子：

	假设你的工程里面有4个文件，分别是Stock.cpp,     b.h,      c.h,     d.h。
	Stock.cpp的头部是：
	　　#include "b.h "
	　　#include "c.h "

	b.h和c.h的头部都是:
	#include "d.h "
	而d.h里面有class Stock的定义。


	运行:
	编译器编译Stock.cpp的时候，先根据头文件#include "b.h "去编译b.h这个问题，再根据b.h里面的#include "d.h "，去编译d.h的这个文件，这样就把d.h里面的class D编译了；
	然后再根据Stock.cpp的第二句#include "c.h "，去编译c.h，最终还是会找到的d.h里面的class D，但是class D之前已经编译过了，所以就会报重定义错误。

	加上ifndef/define/endif，就可以防止这种重定义错误。

2、include 用法
	#include是C++ 的编译预处理命令，它的作用包含对应的文件，#include 的两种不同的写法，#include<***.h>和#include"***.h".

	采用“<>”方式进行包含的头文件表示让编译器在编译器的预设标准路径下去搜索相应的头文件，如果找不到就报错。

	采用“”表示先在工程所在路径下搜索，如果失败，再到系统标准路径下搜索。
	所以，特别要注意的是，如果是标准库头文件，那么既可以采用<>的方式，又可以采用" "的方式，而用户自定义的头文件只能采用" "的方式。

#include其实不过是将指定文件内容展开，然后再编译而已，那肯定能轻松理解这个赢巧奇技

3、C++中定义常量可以用#define 、const 这两种方法。

	例如:

	#define PRICE 10 //定义单价常量10
	const int PRICE = 10; //定义单价常量10

4、C++ 中define（宏定义）
	1、define是宏定义bai，程序在预处理阶段将du用define定义的内容进行了替换。因此在程序运行时，常zhi量表中dao并没有用define定义的常量，系统不为它分配内存。而const定义的常量，在程序运行时，存在常量表中，且系统为它分配内存。

	2、define定义的常量，预处理时只是直接进行了替换，因此在编译时不能进行数据类型检验。而const定义的常量，在编译时进行严格的类型检验，可以避免出错。

	3、define定义表达式时要注意“边缘效应”。

		例如：

		#defineN1+2；

		floata=N/2.0;

		按照常规做法，可能会认为结果是3/2=1.5；

		但是实际上，结果应该为1+2/2.0=2.0；

		若想要实现3/2，则#defineN(1+2)；

		即为避免边缘效应，一定要加括号。

	C++宏定义

		#define命令是C++语言中的宏定义命令，它用于将标识符定义为字符串，标识符称为宏名，定义的字符串称为替换文本。

		1、简单的宏定义：

		#define <宏名> <字符串>

		例： #define PI 3.1415926

		2、带参数的宏定义

		#define <宏名> (<参数表>) <宏体>

		例： #define A(x) x










	